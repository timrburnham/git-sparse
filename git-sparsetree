#!/usr/bin/env python3
import os
import subprocess as sp

def get_consent(question):
    yes = ('yes', 'ye', 'y')
    print(question, end=' <y/n> ')
    answer = input().lower()
    return answer in yes

def mkdir(path):
    try:
        os.mkdir(path)
    except FileExistsError:
        pass

def config_sparse(value=False):
    if value:
        rc = sp.run(('git', 'config', 'core.sparseCheckout', value))
        rc.check_returncode()

    rc = sp.run(('git', 'config', 'core.sparseCheckout'), stdout=sp.PIPE)
    if rc.returncode: # non-zero
        print("Sparse checkout not configured")
    else:
        status = rc.stdout.decode('utf-8').splitlines()[0]
        print("Sparse checkout enabled: " + status)

def add_worktree(path):
    rc = sp.run(('git', 'worktree', 'prune'))
    rc.check_returncode()

    rc = sp.run(('git', 'worktree', 'add', '--no-checkout', path),
                stdout=sp.PIPE, stderr=sp.STDOUT)
    if rc.returncode: # non-zero
        msg = rc.stdout.decode('utf-8')
        print(msg)
        if 'already exists' in msg:
        # try adding existing branch
            branch = os.path.basename(path)
            print(f"Attempting to checkout existing branch {branch} "
                  f"to {path} instead.\n")
            rc = sp.run(('git', 'worktree', 'add', '--no-checkout',
                        path, branch))
            rc.check_returncode()
        else:
            print(rc.stdout)
            rc.check_returncode()

def get_sparse_checkout(git_dir):
    info_dir = os.path.join(git_dir, 'info')
    mkdir(info_dir)
    sparse_checkout = os.path.join(info_dir, 'sparse-checkout')
    return sparse_checkout

def create_sparse_checkout(path, pattern="*"):
    with open(path, 'wt') as f:
        f.write(pattern + "\n")
        f.write("# Enter file patterns to checkout into new worktree,\n"
                "# one per line.\n")

def edit_sparse_checkout(path):
    if not os.path.exists(path):
        create_sparse_checkout(path, "*")
    editor = os.environ.get('EDITOR') or 'vi'
    rc = sp.run((editor, path))
    rc.check_returncode()

def get_git_dir():
    rc = sp.run(('git', 'rev-parse', '--git-dir'), stdout=sp.PIPE)
    rc.check_returncode()
    git_dir = rc.stdout.decode('utf-8').splitlines()[0]
    return git_dir

def checkout():
    rc = sp.run(('git', 'checkout'))
    if rc.returncode: # non-zero
        print("Check if specified pattern exists and retry:\n"
              "  cd {}\n"
              "  git sparsetree edit".format(os.getcwd()))

def arg_usage(parser, args):
    parser.print_usage()

def arg_config(parser, args):
    if args.enable:
        config_sparse('true')
    elif args.disable:
        config_sparse('false')
    else:
        config_sparse()

def arg_add(parser, args):
    add_worktree(args.path)
    os.chdir(args.path) # switch to worktree
    arg_edit(parser, args)

def arg_edit(parser, args):
    git_dir = get_git_dir()
    sparse_checkout = get_sparse_checkout(git_dir)

    if args.pattern:
        create_sparse_checkout(sparse_checkout, args.pattern)
    else:
        if os.path.exists(sparse_checkout) or \
           get_consent("OK to create file? ({})".format(sparse_checkout)):
            edit_sparse_checkout(sparse_checkout)
        else:
            return

    if args.checkout or get_consent("OK to checkout repository? ({})" \
                                    .format(os.getcwd())):
        checkout()

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(prog="git sparsetree")
    parser.set_defaults(func=arg_usage)
    subparsers = parser.add_subparsers()

    # config
    parser_config = subparsers.add_parser('config',
                                          help='configure sparse checkout '
                                          'in this repository')
    parser_config.add_argument("--enable",
                               action="store_true",
                               help="enable sparse checkout in this repository")
    parser_config.add_argument("--disable",
                               action="store_true",
                               help="disable sparse checkout in this repository")
    parser_config.set_defaults(func=arg_config)

    # add
    parser_add = subparsers.add_parser('add',
                                       help='add sparse worktree')
    parser_add.add_argument("path",
                            help="path to create new worktree")
    parser_add.set_defaults(func=arg_add)

    # edit
    parser_edit = subparsers.add_parser('edit',
                                        help='edit sparse checkout inclusions')
    parser_edit.set_defaults(func=arg_edit)

    # shared args
    for p in (parser_add, parser_edit):
        p.add_argument("-p", "--pattern",
                       help="file pattern to populate working directory")
        p.add_argument("--checkout",
                       action="store_true",
                       help="checkout without prompting")

    parser.add_argument("-v", "--version",
                        action="version",
                        version="%(prog)s 0.04")
    args = parser.parse_args()
#    import pdb; pdb.set_trace()
    args.func(parser, args)
